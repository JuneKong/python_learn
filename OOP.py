#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# name:面向对象编程

# 一个对象包含了数据和操作数据的函数。
# 数据封装、继承和多态是面向对象的三大特点
#
# 面向过程的程序设计把计算机程序视为一系列的命令集合，即一组函数的顺序执行。
# 为了简化程序设计，面向过程把函数继续切分为子函数，即把大块函数通过切割成小块函数来降低系统的复杂度。
# 而面向对象的程序设计把计算机程序视为一组对象的集合，而每个对象都可以接收其他对象发过来的消息，并处理这些消息，计算机程序的执行就是一系列消息在各个对象之间传递。
# 面向对象的设计思想是抽象出Class，根据Class创建Instance。


# *****类和实例*****
# class后面紧接着是类名，类名通常是大写开头的单词，紧接着是(object)，表示该类是从哪个类继承下来的
# class Student(object)
# 创建实例是通过类名+()实现的
# 类中的一个特殊的__init__方法：相当于ts类中的constructor()
# 注意到__init__方法的第一个参数永远是self，表示创建的实例本身
# __init__(self,a,b...);
#
# ==>>数据封装：即方法
# 方法中的第一个参数必须也是self才能使用数据
#


# *****访问限制*****
# 在Python中，实例的变量名如果以__开头，就变成了一个私有变量（private），只有内部可以访问，外部不能访问
# 若要访问，其实它是变成了 "_类名__xxx",访问该值即可；
# **注意的是，在Python中，变量名类似__xxx__的，也就是以双下划线开头，并且以双下划线结尾的，是特殊变量，
# 特殊变量是可以直接访问的，不是private变量


# *****继承和多态*****
# 继承最大的好处是子类获得了父类的全部功能。
# 父类和子类存在相同方法时，子类方法会覆盖父类方法，这样就可以实现子类多态
# 继承的另一个好处：多态。
# 每个类都是一种数据类型
# 在继承关系中，如果一个实例的数据类型是某个子类，那它的数据类型也可以被看做是父类。但是，反过来就不行
#
# 多态的意思：
# 对于一个变量，我们只需要知道它是父类型Animal类型，无需确切地知道它的子类型，就可以放心地调用父类方法中run()方法，而具体调用的run()方法是作用在Animal、Dog、Cat还是Tortoise对象上，由运行时该对象的确切类型决定，
# 这就是多态真正的威力：调用方只管调用，不管细节，而当我们新增一种Animal的子类时，只要确保run()方法编写正确，不用管原来的代码是如何调用的。
# 这就是著名的“开闭”原则：
# 对扩展开放：允许新增Animal子类；
# 对修改封闭：不需要修改依赖Animal类型的run_twice()等函数。


# *****获取对象信息*****
# 判断对象类型，使用type()函数， 它返回对应的Class类型
# 如果要判断一个对象是否是函数怎么办？可以使用types模块中定义的常量
#
# 要判断class的类型，可以使用isinstance()函数
# isinstance()判断的是一个对象是否是该类型本身，或者位于该类型的父继承链上。
#
# 如果要获得一个对象的所有属性和方法，可以使用dir()函数，它返回一个包含字符串的list
#
# 直接操作一个对象的状态：getattr()、setattr()以及hasattr()


# *****实例属性和类属性*****
# 由于Python是动态语言，根据类创建的实例可以任意绑定属性。